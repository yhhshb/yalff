#include "SGLibConstants.hpp"
#include <cmath>

namespace SGLib{

//Extended uppercase IUPAC protein single letter alphabet including X etc.
const IUPAC_t ExtendedIUPACProtein = "ACDEFGHIKLMNPQRSTVWYBXZJUO";
const IUPAC_t IUPACProtein = "ACDEFGHIKLMNPQRSTVWY";
const IUPAC_t IUPACAmbiguousDNA = "ABCDGHKMNRSTVWY";
const IUPAC_t IUPACUnambiguousDNA = "ACGT";
const IUPAC_t ExtendedIUPACDNA = "ABCDGSTW";
const IUPAC_t IUPACAmbiguousRNA = "ABCDGHKMNRSUVWY";
const IUPAC_t IUPACUnambiguousRNA = "ACGU";

const std::shared_ptr<const IUPAC_t> ExtendedIUPACProteinPtr = std::make_shared<const IUPAC_t>(ExtendedIUPACProtein);
const std::shared_ptr<const IUPAC_t> IUPACProteinPtr = std::make_shared<const IUPAC_t>(IUPACProtein);
const std::shared_ptr<const IUPAC_t> IUPACAmbiguousDNAPtr = std::make_shared<const IUPAC_t>(IUPACAmbiguousDNA);
const std::shared_ptr<const IUPAC_t> IUPACUnambiguousDNAPtr = std::make_shared<const IUPAC_t>(IUPACUnambiguousDNA);
const std::shared_ptr<const IUPAC_t> ExtendedIUPACDNAPtr = std::make_shared<const IUPAC_t>(ExtendedIUPACDNA);
const std::shared_ptr<const IUPAC_t> IUPACAmbiguousRNAPtr = std::make_shared<const IUPAC_t>(IUPACAmbiguousRNA);
const std::shared_ptr<const IUPAC_t> IUPACUnambiguousRNAPtr = std::make_shared<const IUPAC_t>(IUPACUnambiguousRNA);

//--------------------------(  ) this is the ", ---------------------------------------(  ) this is the backslash
const Quality_t SangerQR = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
const Quality_t IlluminaQR_1_0 = ";<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
const Quality_t IlluminaQR_1_3 = "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
const Quality_t IlluminaQR_1_5 = "BCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";
const Quality_t IlluminaQR_1_8 = SangerQR;

const std::shared_ptr<const Quality_t> SangerQRPtr = std::make_shared<const Quality_t>(SangerQR);
const std::shared_ptr<const Quality_t> IlluminaQR_1_0Ptr = std::make_shared<const Quality_t>(IlluminaQR_1_0);
const std::shared_ptr<const Quality_t> IlluminaQR_1_3Ptr = std::make_shared<const Quality_t>(IlluminaQR_1_3);
const std::shared_ptr<const Quality_t> IlluminaQR_1_5Ptr = std::make_shared<const Quality_t>(IlluminaQR_1_5);
const std::shared_ptr<const Quality_t> IlluminaQR_1_8Ptr = SangerQRPtr;

const std::array<uint8_t, 256> base_to_int = {{
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0xFF, 0x01,  0xFF, 0xFF, 0xFF, 0x02,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0x04, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0x03, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0xFF, 0x01,  0xFF, 0xFF, 0xFF, 0x02,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0x04, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0x03, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF,  0xFF, 0xFF, 0xFF, 0xFF
}};

}//SGLib



